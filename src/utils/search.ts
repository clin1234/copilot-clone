import SnippetExtractors from "./extractors";
import ExtractorAbstract, { SnippetResult } from "./extractors/ExtractorAbstract";

import { FetchPageResult, fetchPageTextContent } from "./fetchPageContent";

import * as vscode from "vscode";
import { getConfig } from "../config";

/**
 * Cache results to avoid VSCode keep refetching
 */
const cachedResults: Record<string, SnippetResult[]> = {};

// Send search query to google, get answers from stackoverflow
// then extract and return code results
export async function search(
  keyword: string
): Promise<null | { results: SnippetResult[] }> {

  if (keyword in cachedResults) {
    return Promise.resolve({ results: cachedResults[keyword] });
  }

  const config = getConfig();
  console.log(config);

  /* eslint "no-async-promise-executor": "off" */
  const promise = new Promise<{ results: SnippetResult[] }>((resolve, reject) => {
    void (async () => {
      let results: SnippetResult[] = [];
      let fetchResult: FetchPageResult;

      try {
        for (const extractor of SnippetExtractors) {
          if (extractor.isEnabled()) {
            if (extractor.generateCode) {
              if (!config.settings.OpenAI) {
                vscode.window.setStatusBarMessage(
                  `Unable to find API Key for ${extractor.name}`,
                  2000
                );
                return [];
              }

              const task = vscode.window.setStatusBarMessage(`Generate code...`);
              // @ts-expect-error
              // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
              const providerSettings = config.settings[extractor.name];
              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
              const generated = await extractor.generateCode(keyword, {
                ...providerSettings,
                ...config.settings.ai
              });
              results = results.concat(
                generated.map((code) => ({
                  votes: 0,
                  hasCheckMark: false,
                  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions, @typescript-eslint/no-unsafe-member-access
                  sourceURL: `Generated by ${extractor.name} (${providerSettings.model})`,
                  code,
                }))
              );
              task.dispose();
              break;
            }

            const urls = await extractor.extractURLFromKeyword(keyword);

            for (let y = 0; y < urls.length; y++) {
              fetchResult = await fetchPageTextContent(urls[y]);
              results = results.concat(extractor.extractSnippets(fetchResult));

              vscode.window.setStatusBarMessage(
                `${extractor.name} (${y.toString()}/${urls.length.toString()}): ${results.length.toString()} results`,
                2000
              );

              if (results.length >= config.settings.maxResults) {
                break;
              }
            }

            if (results.length >= config.settings.maxResults) {
              break;
            }
          }
        }

        cachedResults[keyword] = results;

        resolve({ results });
      } catch (err: unknown) {
        if (err instanceof Error)
          reject(err);
      }

      // When promise resolved, show finished loading for 5 seconds
      vscode.window.setStatusBarMessage(
        `CaptainStack: Finished loading ${results.length.toString()} results`
      );
    })();
  });

  vscode.window.setStatusBarMessage(
    `CaptainStack: Start loading snippet results...`,
    promise
  );
  return promise;
}
